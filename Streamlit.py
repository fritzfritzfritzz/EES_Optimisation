import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
#import plotly.express as px
#import seaborn as sns


import warnings
warnings.filterwarnings('ignore')


#[theme]
primaryColor="#F63366"
backgroundColor="#FFFFFF"
secondaryBackgroundColor="#F0F2F6"
textColor="#262730"
font="sans serif"


st.set_page_config(layout="wide", page_icon = ":sun_with_face:")

# st.markdown(
#     """
#     <style>
#         button[title^=Exit]+div [data-testid=stImage]{
#             text-align: center;
#             display: block;
#             margin-left: auto;
#             margin-right: auto;
#             width: 100%;
#         }
#     </style>
#     """, unsafe_allow_html=True
# )
col1, col2, col3 , col4, col5, col6, col7 = st.columns(7)

with col1:
    pass
with col2:
    pass
with col4:
    pass
with col5:
    pass
with col6:
    pass
with col7:
    pass
with col4:
    # st.image("logo.jpeg", width=200)
    st.image("Logo.jpg")
    # Add a button
    st.button("Learn more", use_container_width=True)
    # Show more information
        #st.write("Helios EcoSolution is a smart energy storage system that helps you reduce your grid cost and maximize your solar energy usage. It uses a smart optimiser that automatically adjusts the charging and discharging of your battery based on your energy demand, solar generation, and grid price. With Helios EcoSolution, you can save money, reduce your carbon footprint, and enjoy a reliable and clean energy supply.")




# Title
st.title(":sun_with_face: Helios EcoSolution") # also can be use :moneybag:
#st.markdown('<style>div.block-container{padding-top:2rem;}</style>',unsafe_allow_html=True)
# Short Description
st.write("Welcome to the Helios EcoSolution Energy Storage System. Helios EcoSolution(HES)- is a smart energy storage system that helps you reduce your grid cost and maximize your solar energy usage. It uses a smart optimiser that automatically adjusts the charging and discharging of your battery based on your energy demand, solar generation, and grid price. With Helios EcoSolution, you can save money, reduce your carbon footprint, and enjoy a reliable and clean energy supply.")

# Create a sidebar
st.sidebar.header("Choose your filter: ")
#create for feature
feature = st.sidebar.selectbox('Select Feature:', ['Solar Generation', 'Consumption', 'Price'])

# Display the selected feature
st.write('Selected Feature:', feature)

# Display more information about the feature
if feature == 'Solar Generation':
    st.write('Solar generation is the amount of solar energy that is generated by your solar panels.')
elif feature == 'Consumption':
    st.write('Consumption is the amount of energy that is used by your home or business.')
elif feature == 'Price':
    st.write('Price is the cost of electricity per MWh.')

# Create a sample dataframe
df_solar_pred = pd.read_pickle('data/predictions_full.pkl')

progress_bar = st.progress(0)
status_text = st.empty()


# we choose here the targets for each plot 
for t in range(96*5):
    if t == 0:
        result = [[df_solar_pred.iloc[t][1][:]]]
    else:
        result = np.append(result,[[df_solar_pred.iloc[t][1][:]]],axis=0)

for t in range(96*2):
    if t == 0:
        result_solar = [[df_solar_pred.iloc[t][2][:]]]
        result_price = [[df_solar_pred.iloc[t][4][:]]]
        result_consumption = [[df_solar_pred.iloc[t][3][:]]]
    else:
        result_solar = np.append(result_solar,[[df_solar_pred.iloc[t][2][:]]],axis=0)
        result_price = np.append(result_price,[[df_solar_pred.iloc[t][4][:]]],axis=0)
        result_consumption = np.append(result_consumption,[[df_solar_pred.iloc[t][3][:]]],axis=0)
# Set up dashboard
st.title("Dataframe Plotting Dashboard")

st.subheader("Daily Savings:") #need to fix this at the end
#plot_type = st.selectbox("Select plot type", ('bar', 'line', 'scatter'))
st.write(result_price[6][0][0])

# 
# Plot the dataframe
st.subheader("Plot")
#plot_type = st.selectbox("Select plot type", ('bar', 'line', 'scatter'))
plot = st.empty()




def plot_graph(ax, x, y, title, ylabel, beg, end, result):
    # Plot the line
    ax.clear()
    ax.plot(x, y, 'white')
    ax.set_title(title)
    ax.title.set_color('white')
    ax.set_ylabel(ylabel)
    ax.set_ylim(beg, end)
    ax.set_xticks([result[i][0][0],result[i][0][47],result[i][0][-1]],labels=[f"{result[i][0][0].astype('datetime64[h]').astype(int) % 24:02}:{result[i][0][0].astype('datetime64[m]').astype(int) % 60:02}",f"{result[i][0][47].astype('datetime64[h]').astype(int) % 24:02}:{result[i][0][47].astype('datetime64[m]').astype(int) % 60:02}",f"{result[i][0][-1].astype('datetime64[h]').astype(int) % 24:02}:{result[i][0][-1].astype('datetime64[m]').astype(int) % 60:02}"])
    ax.set_xlim((result[i][0][0],result[i][0][-1]))
    ax.patch.set_facecolor('black')
    ax.spines['bottom'].set_color('white')
    ax.spines['left'].set_color('white')
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.tick_params(colors='white', which='both') 


with st.expander('Daily Savings:'):
    with plt.rc_context({'xtick.color':'white', 'ytick.color':'white', 'figure.facecolor':'black'}):
        fig1, (axes1, axes2, axes3)  = plt.subplots(3 , figsize=(10,7), sharex=True)
        fig1.tight_layout(pad=1.5)
        
#fig1.patch.set_facecolor('grey')
#fig2, axes2 = plt.subplots(figsize=(20,3))
#fig3, axes3 = plt.subplots(figsize=(20,3))

# Setting the axis limits
num_iterations = result.shape[0]
for i in range(num_iterations):
    # Perform simulation step

    # Update progress bar and status text
    progress = (i + 1) / num_iterations
    progress_bar.progress(progress)
    status_text.text(f"Simulation Progress: {int(progress * 100)}%")
    # data 
    x1, y1 = result[i][0], result_solar[i][0]
    x2, y2 = result[i][0], result_price[i][0]
    x3, y3 = result[i][0], result_consumption[i][0]

    #legend
    label_1 = "Predicted power [MWh]"
    label_2 = "EUR per MWh"
    label_3 = "Predicted Consumption [MWh]"

#    plt.subplot(3, 1, 2)
    plot_graph(axes1, x1, y1, 'Solar Generation', label_1, -200, 11000, result)

    plot_graph(axes2, x2, y2, 'Price per MWh', label_2, -0, 100, result)

    plot_graph(axes3, x3, y3, 'Consumption in [MWh]', label_3, 10000, 20000, result)

    #st.pyplot(fig1)
    plot.pyplot(fig1)
    
    #plot.line_chart(random_walk[:i+1])
    # Pause for simulation speed
    time.sleep(0.01)

# with st.expander('Daily Savings:'):
#         st.write('Daily Savings:')
#         st.write(result_price[6][0][0])

