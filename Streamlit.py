import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
import datetime as dt
#import plotly.express as px
#import seaborn as sns


import warnings
warnings.filterwarnings('ignore')


#[theme]
primaryColor='#353535'
backgroundColor='#353535'
secondaryBackgroundColor='#353535'
textColor="#262730"
#font=



st.set_page_config(layout="wide", page_icon = ":sun_with_face:")

# st.markdown(
#     """
#     <style>
#         button[title^=Exit]+div [data-testid=stImage]{
#             text-align: center;
#             display: block;
#             margin-left: auto;
#             margin-right: auto;
#             width: 100%;
#         }
#     </style>
#     """, unsafe_allow_html=True
# )

# Title
st.title(":sun_with_face: Helios EcoSolution") # also can be use :moneybag:
#st.markdown('<style>div.block-container{padding-top:2rem;}</style>',unsafe_allow_html=True)
# Short Description
st.write("Welcome to the Helios EcoSolution Energy Storage System. Helios EcoSolution(HES)- is a smart energy storage system that helps you reduce your grid cost and maximize your solar energy usage. It uses a smart optimiser that automatically adjusts the charging and discharging of your battery based on your energy demand, solar generation, and grid price. With Helios EcoSolution, you can save money, reduce your carbon footprint, and enjoy a reliable and clean energy supply.")

# Create a sidebar
st.sidebar.header("Choose your filter: ")
#create for feature
feature = st.sidebar.selectbox('Select Feature:', ['Solar Generation', 'Consumption', 'Price'])

# Display the selected feature
st.write('Selected Feature:', feature)

# Display more information about the feature
if feature == 'Solar Generation':
    st.write('Solar generation is the amount of solar energy that is generated by your solar panels.')
elif feature == 'Consumption':
    st.write('Consumption is the amount of energy that is used by your home or business.')
elif feature == 'Price':
    st.write('Price is the cost of electricity per MWh.')

# Create a sample dataframe
df_solar_pred = pd.read_pickle('data/optimisation_constrained_5kW_solar.pkl')

progress_bar = st.progress(0)
status_text = st.empty()

timeframe = 10
offset = 3000 


# we choose here the targets for each plot 
for t in range(offset, (offset+96*timeframe)):
    if t == offset:
        result = [[df_solar_pred.iloc[t][1][:]]]
    else:
        result = np.append(result,[[df_solar_pred.iloc[t][1][:]]],axis=0)

for t in range(offset, (offset+96*timeframe)):
    if t == offset:
        result_solar = [[df_solar_pred.iloc[t][2][:]]]
        result_price = [[df_solar_pred.iloc[t][4][:]]]
        result_consumption = [[df_solar_pred.iloc[t][3][:]]]
    else:
        result_solar = np.append(result_solar,[[df_solar_pred.iloc[t][2][:]]],axis=0)
        result_price = np.append(result_price,[[df_solar_pred.iloc[t][4][:]]],axis=0)
        result_consumption = np.append(result_consumption,[[df_solar_pred.iloc[t][3][:]]],axis=0)
# Set up dashboard
st.title("Dashboard")

total_savings = df_solar_pred['cumulated_savings'].round(0)
daily_savings = df_solar_pred['objective_function'].round(0)

# 
# Plot the dataframe
st.subheader("Predictions")
#plot_type = st.selectbox("Select plot type", ('bar', 'line', 'scatter'))
#plot = st.empty()

# Battery plot ------------------------------------------

battery_shape = np.array([
    [0.09, 0.09],
    [0.09, 0.91],
    [0.4, 0.91],
    [0.4, 0.95],
    [0.6, 0.95],
    [0.6, 0.91],
    [0.91, 0.91],
    [0.91, 0.09],
    [0.09, 0.09]
])
def plot_battery(y):
    ax.clear()
    ax.bar(1, y, linecolor)

# Time series plots ---------------------------------------------

def plot_graph(ax, x, y, x2, y2, title, ylabel, beg, end, result, linecolor1, linecolor2):
    # Plot the line
    ax.clear()
    ax.plot(x, y, linecolor1)
    ax.plot(x2, y2, linecolor2)
    ax.set_title(title)
    ax.title.set_color('white')
    ax.set_ylabel(ylabel)
    ax.set_ylim(beg, end)
    ax.set_xticks([result[i][0][0],result[i][0][47],result[i][0][-1]],labels=[f"{result[i][0][0].astype('datetime64[h]').astype(int) % 24:02}:{result[i][0][0].astype('datetime64[m]').astype(int) % 60:02}",f"{result[i][0][47].astype('datetime64[h]').astype(int) % 24:02}:{result[i][0][47].astype('datetime64[m]').astype(int) % 60:02}",f"{result[i][0][-1].astype('datetime64[h]').astype(int) % 24:02}:{result[i][0][-1].astype('datetime64[m]').astype(int) % 60:02}"])
    #ax.set_xticks([result[i][0][0].dt.hour(),result[i][0][47],result[i][0][-1]])
    ax.patch.set_facecolor('white')
    ax.spines['bottom'].set_color('white')
    ax.spines['left'].set_color('white')
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.tick_params(colors='white', which='both') 

col7, col8 = st.columns([0.8,0.20])

with col7:
    plot = st.empty()

with plt.rc_context({'xtick.color':'white', 'ytick.color':'white', 'figure.facecolor':'#353535'}):
    fig1, (axes1, axes2)  = plt.subplots(2 , figsize=(9,5), sharex=True)
    fig1.tight_layout(pad=1.5)

f = 0.3
with col8:
    plot_b = st.empty()

fig_b,ax_b = plt.subplots(2,figsize=(2,5.5),facecolor='#353535')
#ax_b.set_facecolor('white')#353535')
ax_b[0].set_facecolor('#353535')
ax_b[0].fill(battery_shape[:, 0], battery_shape[:, 1], 'lightgrey')
ax_b[0].set_xlim(0, 1)
ax_b[0].set_ylim(0, 1)
ax_b[0].set_title('Battery Charge')
ax_b[0].spines['top'].set_visible(False)
ax_b[0].spines['bottom'].set_visible(False)
ax_b[0].spines['right'].set_visible(False)
ax_b[0].spines['left'].set_visible(False)
ax_b[0].title.set_color('white')


# Removing ticks and labels

ax_b[0].set_xticks([])
ax_b[0].set_yticks([])

#fig1.patch.set_facecolor('grey')
#fig2, axes2 = plt.subplots(figsize=(20,3))
#fig3, axes3 = plt.subplots(figsize=(20,3))

num_iterations = result.shape[0]
col1, col2, col3 , col4, col5, col6 = st.columns(6)
with col1:
    title_1 = st.empty()
with col2:
    savings_2 = st.empty()
with col3:
    title_3 = st.empty()
with col4:
    savings_3 = st.empty()
with col5:
    pass#plot_b = st.empty()
with col6:
    pass
#title_1 = st.empty()
#savings_2 = st.empty()

#title_3 = st.empty()
#savings_3 = st.empty()

# Setting the axis limits

for i in range(num_iterations):
    # Perform simulation step

    # Update progress bar and status text
    progress = (i + 1) / num_iterations
    progress_bar.progress(progress)
    status_text.text(f"Simulation Progress: {int(progress * 100)}%")

#    st.write("Daily Savings:")
    #st.write(f'{savings[i]} %')
    # data 
    x1, y1 = result[i][0], result_solar[i][0]
    x2, y2 = result[i][0], result_price[i][0]
    x3, y3 = result[i][0], result_consumption[i][0]

    #legend
    label_1 = "Power [kW]"
    label_2 = "Price [€/MWh]"
    #label_3 = "Predicted Consumption [MWh]"

#    plt.subplot(3, 1, 2)
    plot_graph(axes1, x1, y1, x3, y3, 'Solar generation and Consumption', label_1, -0.1, 3, result, '#FB8C00', '#27C7BD')

    plot_graph(axes2, x2, y2, x2, y2, 'Price per MWh', label_2, 0.1, 0.4, result, '#F46524', '#F46524')

#   plot_graph(axes3, x3, y3, x3, y3, 'Consumption in [MWh]', label_3, 0, 3, result, '#27C7BD', '#27C7BD')
    #bar_height = 0.7 * progress

# Plotting the charging bars
    #plt.bar(0.5, bar_height, width=0.7, bottom=0.15, color='#27b7bd')
    # Pause for simulation speed
    # Update plot
    #plot.line_chart(random_walk[:i+1])
    #plot.pyplot(fig)
    #st.pyplot(fig1)
    plot.pyplot(fig1)
    plot_b.pyplot(fig_b)
    title_1.write( "Savings for the \nnext 24 h:")
    savings_2.subheader(f'{daily_savings.iloc[i+offset]} €')
    
    title_3.write( "Total accumulated savings:")
    savings_3.subheader( f'{total_savings.iloc[i+offset]} €')
    #plot.line_chart(random_walk[:i+1]) .loc['cumulated_savings']
    # Pause for simulation speed
    time.sleep(0.01)


